// wip-docs/src/components/navbar/mobileDocSidebarContent.js (or .tsx)
import React, { useEffect } from 'react';
import clsx from 'clsx';
import { ThemeClassNames } from '@docusaurus/theme-common';
import DocSidebarItems from '@theme/DocSidebarItems'; // Standard Docusaurus ToC renderer
import CustomSidebarComponent from '@site/src/components/CustomSidebar'; // Your version/framework selector
import { FiExternalLink } from 'react-icons/fi'; // For bottom links
import useBaseUrl from '@docusaurus/useBaseUrl'; // For correct pathing of internal links
import {
  useDocsData,
  useActivePluginAndVersion,
} from '@docusaurus/plugin-content-docs/client';
// Updated SidebarItem interface to be more comprehensive
interface SidebarItem {
  type: 'link' | 'category' | 'doc' | 'html' | 'autogenerated'; // Docusaurus item types
  label?: string;
  href?: string;       // For links and resolved docs
  docId?: string;      // For items of type 'doc' before resolution
  items?: SidebarItem[]; // For categories
  value?: string;      // For HTML items
}
// Import styles. You can reuse/adapt from your desktop sidebar or create new specific ones.
// Let's assume you'll adapt desktop styles or create new ones here.
import styles from './mobileDocSidebarContent.module.css'; // Ensure this CSS file exists and is styled

// Props:
// - sidebar: The array of sidebar items (categories, docs) for the current ToC
// - currentPathname: The current browser URL pathname to highlight the active item
// - onClose: A function to call when a navigable item is clicked, to close the drawer
const MobileDocSidebarContent = ({ currentPathname, onClose }) => {
  const activePluginAndVersion = useActivePluginAndVersion();
  const activeDocsPluginId = activePluginAndVersion?.activePlugin?.pluginId;
  const docsData = useDocsData(activeDocsPluginId);
  console.log("docsData (all versions): ", docsData);

  const currentVersionData = docsData?.versions?.find(version => version.isLast);
  console.log("currentVersionData: ", currentVersionData);

  // *** This is the crucial part based on your data structure ***
  const rawSidebarObject = currentVersionData?.sidebars?.reactKitSidebar;
  console.log("rawSidebarObject (for 'reactKitSidebar'):", rawSidebarObject);

  let normalizedSidebarItems: SidebarItem[] = [];

  if (rawSidebarObject) {
    // Case 1: The sidebar is defined as { link: { path: '...', label: '...' } }
    // This structure comes directly from your provided data.
    if (rawSidebarObject.link && typeof rawSidebarObject.link === 'object') {
      normalizedSidebarItems = [{
        type: 'link', // We infer the type
        href: rawSidebarObject.link.path,
        label: rawSidebarObject.link.label,
      }];
    }
    // Case 2: The sidebar is already an array of standard items (more common)
    // e.g., reactKitSidebar: [ { type: 'doc', id: '...' }, ... ]
    else if (Array.isArray(rawSidebarObject)) {
      normalizedSidebarItems = rawSidebarObject as SidebarItem[];
    }
    // Case 3: The sidebar is a single standard item (not an array)
    // e.g., reactKitSidebar: { type: 'doc', id: '...' }
    else if (typeof rawSidebarObject === 'object' && rawSidebarObject.type) {
       normalizedSidebarItems = [rawSidebarObject as SidebarItem];
    }
     else {
      console.warn("Unrecognized sidebar structure for 'reactKitSidebar':", rawSidebarObject);
    }
  }

  console.log("normalizedSidebarItems to render:", normalizedSidebarItems);




  // Effect to disable body scroll when this component (and thus the drawer) is open
  useEffect(() => {
    const originalStyle = window.getComputedStyle(document.body).overflow;
    document.body.style.overflow = 'hidden';
    return () => {
      document.body.style.overflow = originalStyle;
    };
  }, []); // Empty dependency array means this runs on mount and cleanup on unmount

  const handleBottomLinkClick = (url) => {
    if (onClose) onClose(); // Close the drawer
    window.location.href = url; // Or use Docusaurus Link for internal routes if appropriate
  };

  const handleFigmaLinkClick = () => {
    if (onClose) onClose();
    // window.open('YOUR_FIGMA_LINK_HERE', '_blank'); // Ensure this link is correct
  }

  return (
    // Main container for the mobile sidebar content
    // This structure mimics your desktop sidebar's desired 3-part layout
    <div className={styles.mobileDocSidebarLayoutWrapper}> {/* Top-level wrapper for layout */}

      {/* === 1. TOP PART (Your CustomSidebar for selectors) === */}
      <div className={styles.mobileDocSidebarTopSection}>
        <CustomSidebarComponent />
      </div>

        {/* === 2. MIDDLE SCROLLABLE PART (Docusaurus DocSidebarItems - Table of Contents) === */}
        <div className={clsx(styles.mobileDocSidebarScrollableMenuArea, 'thin-scrollbar')}>
        {normalizedSidebarItems && normalizedSidebarItems.length > 0 ? (
          <ul className={clsx(ThemeClassNames.docs.docSidebarMenu, 'menu__list')}>
            <DocSidebarItems
              items={normalizedSidebarItems}
              activePath={currentPathname}
              onItemClick={(item) => {
                // Close the drawer when a link or category with an href is clicked
                if (((item.type === 'category' && item.href) || item.type === 'link') && onClose) {
                  onClose();
                }
              }}
              level={1} // Start rendering from level 1
            />
          </ul>
        ) : (
          <div className={styles.noTocMessage}>
            Table of Contents not available for this page.
          </div>
        )}
      </div>

      {/* === 3. BOTTOM "STICKY" PART (Utility Links) === */}
      <div className={styles.mobileDocSidebarBottomLinks}>
        <div onClick={() => handleBottomLinkClick(useBaseUrl("/ui-kit/react/migration-guide"))} className={styles.bottomLinkItem}>
          <span>Migration Guide</span>
          <FiExternalLink />
        </div>
        <div onClick={() => handleBottomLinkClick(useBaseUrl("/ui-kit/react/changelog"))} className={styles.bottomLinkItem}>
          <span>Change Log</span>
          <FiExternalLink />
        </div>
        <a href="YOUR_FIGMA_LINK_HERE" target="_blank" rel="noopener noreferrer" className={styles.bottomLinkItem} onClick={handleFigmaLinkClick}>
          <span>Figma Design</span>
          <FiExternalLink />
        </a>
      </div>
    </div>
  );
};

export default MobileDocSidebarContent;